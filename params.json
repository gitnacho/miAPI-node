{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n\r\n\r\n# <abbr title=\"Events\">Eventos</abbr>\r\n\r\n    Estabilidad: 4 — API congelada\r\n\r\n<!-- type=module -->\r\n\r\nEn Node muchos objetos emiten eventos: un `net.Server` emite un evento al abrir un archivo. Todos los objetos que emiten eventos son instancias de `events.EventEmitter`.\r\nPuedes acceder a este módulo invocando a: \r\n\r\n    var events = require('events');\r\n\r\nTípicamente, los nombres de evento están representados por una cadena con mayúsculas intercaladas, sin embargo, no hay restricciones estrictas en ellas, dado que cualquier cadena será aceptada.\r\n\r\nPuedes adjuntar funciones a objetos, para ser ejecutadas cuando se emita un evento. Estas funciones se conocen como _escuchas_.\r\n\r\n\r\n## Clase: `events.EventEmitter`\r\n\r\nPara acceder a la clase `EventEmitter` usa:\r\n\r\n    var emisor = require('events').EventEmitter\r\n\r\nCuando una instancia de `EventEmitter` experimenta un error, la acción típica consiste en emitir un evento `'error'`.  En Node, los eventos de error se tratan como un caso especial.\r\nSi no hay escucha para él, entonces la acción predeterminada es imprimir el seguimiento de la pila y salir del programa.\r\n\r\nTodos los escuchas.\r\n\r\n### `emisor.addListener(`<abbr title=\"event\">`evento`</abbr>`, `<abbr title=\"listener\">`escucha`</abbr>`)`\r\n### `emisor.on(`<abbr title=\"event\">`evento`</abbr>`, `<abbr title=\"listener\">`escucha`</abbr>`)`\r\n\r\nAñade un escucha al final del arreglo de escuchas del evento especificado.\r\n\r\n    servidor.on('connection', function (flujo) {\r\n      console.log('¡alguien se ha conectado!');\r\n    });\r\n\r\n### `emisor.once(`<abbr title=\"event\">`evento`</abbr>`, `<abbr title=\"listener\">`escucha`</abbr>`)`\r\n\r\nAgrega un escucha **fugaz** para el evento. Este escucha, es invocado únicamente la siguiente vez que se emita el evento, tras la cual se elimina.\r\n\r\n    servidor.once('connection', function (flujo) {\r\n      console.log('¡Ah, tenemos nuestro primer usuario!');\r\n    });\r\n\r\n### `emisor.removeListener(`<abbr title=\"event\">`evento`</abbr>`, `<abbr title=\"listener\">`escucha`</abbr>`)`\r\n\r\nQuita un evento especificado.\r\n**Precaución**: esta cambia los índices del arreglo en la matriz de escuchas detrás del escucha.\r\n\r\n    var retrollamada = function (flujo) {\r\n      console.log('¡alguien se ha conectado!');\r\n    };\r\n    server.on('connection', retrollamada);\r\n    // ...\r\n    server.removeListener('connection', retrollamada);\r\n\r\n\r\n### `emisor.removeAllListeners([`<abbr title=\"event\">`evento`</abbr>`])`\r\n\r\nQuita todos los escuchas, o los relacionados al evento especificado.\r\n\r\n\r\n### `emisor.setMaxListeners(`<abbr title=\"n\">`cantidad`</abbr>`)`\r\n\r\nDe manera predeterminada `EventEmitters` imprimirá una notificación si se añaden más de 10 escuchas a un evento en particular. Se trata de una utilidad predeterminada que te ayuda a encontrar fugas de memoria.\r\nObviamente, no todos los emisores se deben limitar a 10. Esta función te permite incrementarlos. Ajústala a cero para ilimitados.\r\n\r\n\r\n### `emisor.listeners(`<abbr title=\"event\">`evento`</abbr>`)`\r\n\r\nDevuelve un evento especificado.\r\n\r\n    servidor.on('connection', function (flujo) {\r\n      console.log('¡alguien se ha conectado!');\r\n    });\r\n    console.log(util.inspect(servidor.listeners('connection'))); // [ [Función] ]\r\n\r\n\r\n### `emisor.emit(`<abbr title=\"event\">`evento`</abbr>`, [arg1], [arg2], [...])`\r\n\r\nEjecuta cada uno de los escuchas en orden con los argumentos proporcionados.\r\n\r\n### Evento: `'newListener'`\r\n\r\n* <abbr title=\"event\">`evento`</abbr> {<abbr title=\"String\">Cadena</abbr>} El nombre del evento\r\n* <abbr title=\"listener\">`escucha`</abbr> {<abbr title=\"Function\">Función</abbr>} La función controladora del evento\r\n\r\nEste evento se emite al momento de agregar un nuevo escucha.\r\n","name":"Miapi-node","tagline":"Mi interpretación de la API de Node","google":""}